@{
    ViewData["Title"] = "Home Page";
}
<br>
<br>
<br>
<div class="row">
    <div class="col-md-12">
        <div class="form-group">
            <label for="sentence-listbox">文章を選択してください。</label>
            <select multiple class="form-control" id="sentence-listbox" size="10">
                @for (int i = 0; i < Model.Sentences.Count; i++)
                {
                    <option value="@i">@Model.Sentences[i].Text</option>
                }
            </select>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <h4 id="sentence-label"></h4>
        <div id="graph-area"></div>
    </div>
</div>

@section Scripts {
    <script src="https://d3js.org/d3.v3.min.js"></script>
    <script type="text/javascript">

        $(window).load(function() {
            $("#sentence-listbox").change(function() {
                var text = $('#sentence-listbox option:selected').text();
                var val = $('#sentence-listbox option:selected').val();
                console.log(text);
                $('#sentence-label').text(text);
                $.ajax({
                    type: "GET",
                    url: "http://localhost:5000/Home/SentenceLink?sentenceIndex=" + val
                }).done(function(graph) {
                    $("#graph-area").empty();
                    var width = 1000;
                    var height = 800;
                    var svg = d3.select("#graph-area").append("svg")
                        .attr("width", width)
                        .attr("height", height);


                    var force = d3.layout.force()
                        .charge(-500)
                        .linkDistance(100)
                        .size([width, height]);

                    force
                        .nodes(graph.nodes)
                        .links(graph.links)
                        .start();
                    var color = d3.scale.category20();
                    var link = svg.selectAll(".link")
                        .data(graph.links)
                        .enter().append("line")
                        .attr("class", "link")
                        .style({
                            stroke: "#ccc",
                            "stroke-width": 1
                        })
                        .style('marker-end', 'url(#arrow)');
                    var node = svg.selectAll("circle")
                        .data(graph.nodes)
                        .enter()
                        .append("circle")
                        .attr("r", 10)
                        .style('fill', function(d) { return color(d.group); })
                        .call(force.drag);

                    // nodeのラベル周りの設定
                    var label = svg.selectAll('text')
                        .data(graph.nodes)
                        .enter()
                        .append('text')
                        .attr("dx", 10)
                        .attr("dy", ".35em")
                        .text(function(data) { return data.label; });

                    force.on("tick",
                        function() {
                            link.attr("x1", function(d) { return d.source.x; })
                                .attr("y1", function(d) { return d.source.y; })
                                .attr("x2", function(d) { return d.target.x; })
                                .attr("y2", function(d) { return d.target.y; });

                            node.attr("cx", function(d) { return d.x; })
                                .attr("cy", function(d) { return d.y; });
                            // labelも追随するように
                            label.attr({
                                x: function(data) { return data.x; },
                                y: function(data) { return data.y; }
                            });
                        });
                    svg.append('defs').selectAll('marker')
                        .data(['arrow']).enter()
                        .append('marker')
                        .attr('id', function(d) { return d; })
                        .attr('viewBox', '0 -5 10 10')
                        .attr('refX', 25)
                        .attr('refY', 0)
                        .attr('markerWidth', 10)
                        .attr('markerHeight', 10)
                        .attr('orient', 'auto')
                        .append('path')
                        .attr('d', 'M0,-5L10,0L0,5 L10,0 L0, -5')
                        .style('stroke', '#4679BD')
                        .style('opacity', '0.6');

                });
            });
        });
    </script>
}